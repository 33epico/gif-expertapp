{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGif","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"mMAMaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAGzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAwBA,OACI,sBAAMC,SAhBa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAG3BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAmBO,OACpCN,EAAc,MASlB,SAEI,uBACIO,KAAK,OACLC,MAAST,EACTU,SA1Be,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCdlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DAGJ,mCACTC,EAJa,iDAImCC,UAAUH,GAJ7C,6BAGJ,oCAHI,SAOEI,MAAMF,GAPR,cAObG,EAPa,gBAQEA,EAAKC,OARP,uBAQZC,EARY,EAQZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAfvB,kBAkBZM,GAlBY,4CAAH,sDCGPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAKgB,IAAKN,IACrB,4BAAIA,QCDHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAKtB,ECRuB,SAACA,GACvB,MAA0Bd,mBACtB,CACIqB,KAAM,GACNa,SAAS,IAHjB,mBAAOC,EAAP,KAAcC,EAAd,KAsBH,OAdGC,qBAAU,WACPxB,EAAQC,GACHwB,MAAK,SAAAC,GAEEH,EACA,CACIf,KAAMkB,EACNL,SAAS,SAG3B,CAACpB,IAIEqB,EDfyBK,CAAY1B,GAA9Ba,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAUnB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAGlDoB,GAAS,mBAAGJ,UAAU,mCAAb,yBAER,qBAAKA,UAAU,YAAf,SAEUH,EAAOJ,KAAK,SAACgB,GAAD,OACR,cAAC,EAAD,eAEQA,GADGA,EAAKd,aEM7BgB,EAlCM,WAIjB,MAAmCzC,mBAAU,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAUA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAKK2C,EAAWnB,KAAK,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEIA,SAAYA,GADLA,UCfzB6B,G,MAAUC,SAASC,cAAc,UAEvCC,IAASC,OAAO,cAAC,EAAD,IAAiBJ,K","file":"static/js/main.7b86b8f5.chunk.js","sourcesContent":["import React, { useState } from 'react' //solo imporamos react si devolvemos jsx\r\nimport PropTypes from 'prop-types';\r\n\r\n//contiene el componente del formulario\r\n//Se pasa como props la referencia a la funcion setCategories por eso va entre {}\r\n//el submit se hace con enter, no usamos boton, lo detectamos con onSubmit en el input\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    //esta const contiene el valor de la caja de texto\r\n    const [inputValue, setInputValue] = useState('');//si no ponemos valor en () es undefined, podemos poner ''\r\n\r\n    //Este metodo se llama desde el inputchange y detecta los cambios en el input para ir actualizando \r\n    //segun escribimos\r\n    const handledInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    //detecta que pulsamos intro, el submit \r\n    const handledSubmit  = (e)=>{\r\n        e.preventDefault();//con esto evitamos el refresh del navegador\r\n\r\n        if (inputValue.trim().length > 2){\r\n            //para mandar un valor al setCategories, obtenemos el valor implicito en el hook traido con la funcion\r\n            //y añadimos el nuevo valor, cats es el valor actual del useState de GifExpertApp\r\n            setCategories(cat => [inputValue,...cat]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    //Este fragmento es una caja de input, cuando escribes se actualiza el inputvalue\r\n    //cuando envias controla con el handledSubmit y segun vas escribiendo obtiene los datos\r\n    //con el handledInputChange\r\n    return (\r\n        <form onSubmit = {handledSubmit}>\r\n        \r\n            <input\r\n                type=\"text\"\r\n                value = {inputValue}\r\n                onChange = {handledInputChange}\r\n            />\r\n        </form>\r\n    )\r\n\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category) => {\r\n\r\n    //monta la uri de conexión\r\n    const apiKey = 'FmExXKPeCLDPDH8qZZzEmIPpnyYirsIe';\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${ apiKey }`\r\n\r\n    //obtiene los datos del endpoint en forma de json\r\n    const resp   = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        //poniendo ? utiliza el resto si viene images\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\n//La pasamos el objeto que contiene la información de cada gif y ponemos los datos de las imagenes\r\nexport const GifGridItem = ({id,title,url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src= {url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGif } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n//Contiene el fragmento donde se dibujan los gifs, recibe la categoria como parametro\r\n//y actualiza el fragmento con los nuevos gifs buscados\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    //Llamamos a nuestro hook personalizado y obtenemos el estado (cargando o cargado) y el conjunto\r\n    //de gifs en el valor data. Lo desectructuramos con data:images\r\n    const {data:images,loading} = useFetchGif(category);\r\n\r\n    //Inicialmene este codigo estaba aqui, luego se movio a GifGridItem\r\n    // useEffect(() => {\r\n    //     getGifs(category).then(imgs => setImages(imgs));\r\n    // },[category]);//si enviamos la lista de dependencias como [] solo se ejecutara una unica vez\r\n   \r\n  \r\n    //Cntiene el contenedor de todos los gifs, pero cada uno de ellos se monta desde\r\n    //GifGridItem\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n            {/* Operador ternario con dos && para evaluar si esta cargado el dato */}\r\n            {loading&&<p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n\r\n            { <div className=\"card-grid\">\r\n                    {\r\n                        images.map ((imgs) => \r\n                            <GifGridItem \r\n                                key = {imgs.id}\r\n                                {...imgs}\r\n                                \r\n                            /> )\r\n                    }\r\n            </div> }\r\n        </>\r\n    )\r\n  \r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n//este hook carga los datos dentro del objeto state y una vez que se ha cargado indica que se ha cargado\r\nexport const useFetchGif = (category) => {\r\n     const [state, setstate] = useState(\r\n         {\r\n             data: [],\r\n             loading: true\r\n         });\r\n\r\n    //con este hooks hacemos que se ejecute la funcion solo una vez o\r\n    //si tenemos puesto algo en [] cada vez que cambie ese array, si esta vacio solo lo hace una vez\r\n     useEffect(() => {\r\n        getGifs(category) //llama al helper que es una promesa para obtener los gifs\r\n            .then(imgs => {\r\n                \r\n                    setstate(\r\n                    {\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n            });\r\n    },[category]);//si enviamos la lista de dependencias como [] solo se ejecutara una unica vez\r\n   \r\n  \r\n\r\n  return state; //{ data: [],loading: true}\r\n} ","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\n//base de la aplicación esta llama al resto de componentes\r\nconst GifExpertApp = () =>{\r\n\r\n    //Usamos el hook useState para actualizar el estado a traves del componente AddCategory\r\n    //le psamamos la REFERENCIA a la funcion que actualizará este array de categories\r\n    const [categories, setCategories]= useState( ['one punch']);\r\n\r\n    // const handledAdd = () =>{\r\n    //     setCategories([...categories,'hola']);\r\n    //     // setCategories(cat => [cat,...categories]);\r\n    // }\r\n\r\n    //NOTA: Cuando mandamos una funcion así {funcion} mandamos la referencia a la función\r\n\r\n    //Devuelve un elemento tipo fragment con la aplicacion\r\n    return (\r\n        <>\r\n            <h1>gifExpertApp</h1>\r\n            {/* Añade el formulario y alimenta las categorias*/}\r\n            <AddCategory setCategories = {setCategories} />\r\n            <hr />\r\n                {/* //ejemplo para devolver el indice  categories.map ((categorie, i) => { return <li>{i} Hola</li>}) */}\r\n                {/* ejemplo con ol li categories.map (categorie =>  <li key ={categorie}>{categorie}</li>) */}\r\n                \r\n                {/* con el .map basicamente hacemos un for recorriendo todos los elementos */}\r\n                {categories.map (category=> \r\n                    <GifGrid \r\n                        key = {category} \r\n                        category = {category}\r\n                    />\r\n                )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n// ReactDOM.render(\n//     <App />,\n//   document.getElementById('root')\n// );\n\n\n//crear un componente\n//giftExpertApp\n//tiene un H2 que dice <giftExpertApp>\n//>hr/>\n\nconst divRoot = document.querySelector('#root')\n\nReactDOM.render(<GifExpertApp />,divRoot);\n\n\n"],"sourceRoot":""}